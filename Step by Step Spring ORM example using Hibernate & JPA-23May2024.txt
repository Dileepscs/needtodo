Step by Step Spring ORM example using Hibernate & JPA
	-23May2024

---------refer the eclipse project for latest and working code

=> 1. Create Dynamic Web Project

=> 2. Convert into Maven Project

=> 3. Add Spring ORM Maven dependencies

Below is our final pom.xml file having Spring ORM dependencies. 
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>SimpleMVC</groupId>
  <artifactId>SimpleMVC</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>SimpleMVC</name>
    	<!-- Add Spring Web and MVC dependencies -->
	<dependencies>
		
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>6.0.15</version>
</dependency>

<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-web</artifactId>
    <version>6.0.20</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.springframework/spring-orm -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-orm</artifactId>
    <version>6.1.3</version>
</dependency>


    <!-- Hibernate EntityManager dependency -->
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-entitymanager</artifactId>
        <version>5.6.12.Final</version> <!-- Replace with the desired version -->
    </dependency>

<!-- https://mvnrepository.com/artifact/jakarta.persistence/jakarta.persistence-api -->
<dependency>
    <groupId>jakarta.persistence</groupId>
    <artifactId>jakarta.persistence-api</artifactId>
    <version>3.1.0</version>
</dependency>


    <!-- Hibernate Validator if you need bean validation -->
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-validator</artifactId>
        <version>6.0.20.Final</version> <!-- Replace with the desired version -->
    </dependency>
    
    
		
<dependency>
    <groupId>jakarta.servlet</groupId>
    <artifactId>jakarta.servlet-api</artifactId>
    <version>6.0.0</version>
    <scope>provided</scope>
</dependency>

<dependency>
    <groupId>jakarta.servlet.jsp</groupId>
    <artifactId>jakarta.servlet.jsp-api</artifactId>
    <version>3.1.1</version>
    <scope>provided</scope>
</dependency>


<dependency>
    <groupId>jakarta.servlet.jsp.jstl</groupId>
    <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
    <version>3.0.0</version>
</dependency>

	<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.5.0</version>
		</dependency>


<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>6.0.10</version>
</dependency>
		
	</dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <release>21</release>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.2.3</version>
      </plugin>
    </plugins>
  </build>
  
</project>

=> 4. Create Spring ORM Model Class

We can use standard JPA annotations for mapping in our model beans because Hibernate provides JPA implementation.

package com.nkxgen.spring.jdbc.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class Dept {
	
	@Id
	private Integer deptNo;
	
	private String dName;
	private String location;
	

	public Dept() {
	}

	public Dept(Integer dno, String dnm, String lc) {
		this.deptNo = dno;
		this.dName = dnm;
		this.location = lc;

	}

	public Integer getDeptNo() {
		return deptNo;
	}

	public void setDeptNo(Integer dno) {
		this.deptNo=dno;
	}

	public String getDName() {
		return dName;
	}
	
	public void setDName(String dnm) {
		this.dName = dnm;
	}

	public String getLocation() {
		return location;
	}
	public void setJob(String lc) {
		this.location = lc;
	}

	
	@Override
	public String toString() {
		return "Dept{" + "Dept No=" + deptNo + ", Dept Name='" + dName + '\'' + ", Location='" + location
				+ '\'' + '}';
	}

	
}

We use @Entity and @Id JPA annotations to qualify our POJO as an Entity and to define itâ€™s primary key.

=> 5. Create Spring ORM DAO Class

We create a very simple DAO class that provides persist and findALL methods.

package com.nkxgen.spring.jdbc.dao;

import java.util.List;

import org.springframework.stereotype.Service;

import com.nkxgen.spring.jdbc.model.Dept;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

@Service
public class DeptDAO {

	@PersistenceContext
	private EntityManager em;

	public void persist(Dept dpt) {
		em.persist(dpt);
	}

	public List<Dept> findAll() {
		return em.createQuery("SELECT d FROM Dept d").getResultList();
	}

}

@Service is Spring annotation that tell the Spring container that we can use this class through Spring IoC (Dependency Injection).

We use JPA @PersistenceContext annotation that indicate dependency injection to an EntityManager. Spring injects a proper instance of EntityManager according to the spring.xml configuration.

=> 6. Create Spring ORM Bean Configuration XML

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd">
           
    <!-- Enable annotation-driven controllers, validation, etc. -->
    <mvc:annotation-driven />

    <!-- Scan the specified base package for Spring components -->
    <context:component-scan base-package="com.nkxgen.spring.jdbc" />

    <!-- Define the view resolver -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>

  <!-- JPA EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="postgresPersistUnit" />
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true" />
                <property name="generateDdl" value="true" />
                <property name="databasePlatform" value="org.hibernate.dialect.PostgreSQLDialect" />
            </bean>
        </property>
    </bean>

    <!-- DataSource -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5433/postgres" />
        <property name="username" value="postgres" />
        <property name="password" value="abc1234$" />
    </bean>

    <!-- Transaction Manager -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>


</beans>

First we tell spring that we want to use classpath scanning for Spring components (Services, DAOs) rather than defining them one by one in spring xml. We have also enabled Spring annotation detection.

We set up a JPA EntityManagerFactory that will used by the application to obtain an EntityManager. Spring supports 3 different ways to do this, we have used LocalContainerEntityManagerFactoryBean for full JPA capabilities. We set LocalContainerEntityManagerFactoryBean attributes as:

packagesToScan attribute that points to our model classes package.

datasource defined earlier in spring configuration file.

jpaVendorAdapter as Hibernate and setting some hibernate properties.

We create Spring PlatformTransactionManager instance as a JpaTransactionManager. This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access.

We enable the configuration of transactional behavior based on annotations, and we set the 
transactionManager we created.

7. Add hibernate persistence configuration through the persistence.xml. Add this under META-INF under resources folder

<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
                                 http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">

    <persistence-unit name="postgresPersistUnit" transaction-type="RESOURCE_LOCAL">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <class>com.nkxgen.spring.jdbc.mode.Dept</class>
        <properties>
            <property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
            <property name="hibernate.hbm2ddl.auto" value="update"/>
            <property name="hibernate.show_sql" value="true"/>
            <property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:postgresql://localhost:5433/postgres"/>
            <property name="javax.persistence.jdbc.user" value="postgres"/>
            <property name="javax.persistence.jdbc.password" value="abc1234$"/>
        </properties>
    </persistence-unit>
</persistence>


=> 8. Create Controller

package com.nkxgen.spring.jdbc;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.nkxgen.spring.jdbc.dao.DeptDAO;
import com.nkxgen.spring.jdbc.dao.EmpDAOImpl;
import com.nkxgen.spring.jdbc.model.Dept;
import com.nkxgen.spring.jdbc.model.Employee;

@Controller
public class DeptController {

	DeptDAO ddao;
	
	@Autowired
	public DeptController(DeptDAO dptdao) {
		ddao=dptdao;
	}

	/**
	 * selects the Add New Employee view to render by returning its name.
	 */
	@RequestMapping(value = "/deptlist", method = RequestMethod.GET)
	public String getAllDepts(Model model) {
		System.out.println("Departments List JSP Requested");

		//get all Departments from DAO
		List<Dept> deptList=ddao.findAll();
		
		//set it to the model
		model.addAttribute("dlist",deptList);
		
		//call the view
		return "deptlist";
	}
	
}


=> 9. Create Input & Output JSPs

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
 <%@ page import="com.nkxgen.spring.jdbc.model.Dept,java.util.*" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Departments List through Spring ORM</title>
</head>
 <BODY BGCOLOR="green">
       <H1>Dept List from Spring ORM </H1>

      <TABLE BORDER="1">
      <TR>
      <TH>Dept No</TH>
      <TH>Dept Name</TH>
      <TH>Location</TH>
      </TR>
      <% 
      	
        List<Dept> dlist=(List<Dept>)request.getAttribute("dlist");
		for(Dept d:dlist){
	  %>
      	<TR>
       		  <TD> <%= d.getDeptNo() %></td>
     		  <TD> <%= d.getDName() %></TD>
      		  <TD> <%= d.getLocation() %></TD>
      </TR>
      <% 
      	} 
      %>
     </TABLE>
     </BODY>
</html>

---
Imp Annotations

Annotations for fields / getter and setter

@GeneratedValue
Together with an ID this annotation defines that this value is generated automatically.

@Transient
Field will not be saved in database


=> Relationship annotations:

@OneToOne

@OneToMany

@ManyToOne

@ManyToMany


=> M2M Implementation in JPA

Modeling a many-to-many relationship with POJOs is easy. We should include a Collection in both classes, which contains the elements of the others.

After that, we need to mark the class with @Entity and the primary key with @Id to make them proper JPA entities.

Also, we should configure the relationship type. So, we mark the collections with @ManyToMany annotations:


@Entity
class Student {

    @Id
    Long id;

    @ManyToMany
    Set<Course> likedCourses;

    // additional properties
    // standard constructors, getters, and setters
}

@Entity
class Course {

    @Id
    Long id;

    @ManyToMany
    Set<Student> likes;

    // additional properties
    // standard constructors, getters, and setters
}

=> Many-to-Many Using a Composite Key

The implementation of a simple many-to-many relationship was rather straightforward. The only problem is that we cannot add a property to a relationship that way because we connected the entities directly. Therefore, we had no way to add a property to the relationship itself.

Since we map DB attributes to class fields in JPA, we need to create a new entity class for the relationship.

Of course, every JPA entity needs a primary key. Because our primary key is a composite key, we have to create a new class that will hold the different parts of the key:

@Embeddable
class CourseRatingKey implements Serializable {

    @Column(name = "student_id")
    Long studentId;

    @Column(name = "course_id")
    Long courseId;

    // standard constructors, getters, and setters
    // hashcode and equals implementation
}

Using a Composite Key in JPA
Using this composite key class, we can create the entity class, which models the join table:


@Entity
class CourseRating {

    @EmbeddedId
    CourseRatingKey id;

    @ManyToOne
    @MapsId("studentId")
    @JoinColumn(name = "student_id")
    Student student;

    @ManyToOne
    @MapsId("courseId")
    @JoinColumn(name = "course_id")
    Course course;

    int rating;
    
    // standard constructors, getters, and setters
}

Using a Composite Key in JPA
Using this composite key class, we can create the entity class, which models the join table:


@Entity
class CourseRating {

    @EmbeddedId
    CourseRatingKey id;

    @ManyToOne
    @MapsId("studentId")
    @JoinColumn(name = "student_id")
    Student student;

    @ManyToOne
    @MapsId("courseId")
    @JoinColumn(name = "course_id")
    Course course;

    int rating;
    
    // standard constructors, getters, and setters
}

After this, we can configure the inverse references in the Student and Course entities as before:

class Student {

    // ...

    @OneToMany(mappedBy = "student")
    Set<CourseRating> ratings;

    // ...
}

class Course {

    // ...

    @OneToMany(mappedBy = "course")
    Set<CourseRating> ratings;

    // ...
}


Note that a composite key class has to fulfill some key requirements:

We have to mark it with @Embeddable.
It has to implement java.io.Serializable.
We need to provide an implementation of the hashcode() and equals() methods.


=> Many-to-Many With a New Entity

Modeling Relationship Attributes

Take an example of students registering for courses. Also, we need to store the point when a student registered for a specific course. On top of that, we want to store what grade she received in the course.

In an ideal world, we could solve this with the std solution, where we had an entity with a composite key. However, the world is far from ideal, and students donâ€™t always accomplish a course on the first try.

In this case, there are multiple connections between the same student-course pairs, or multiple rows, with the same student_id-course_id pairs. We canâ€™t model it using any of the previous solutions because all primary keys must be unique. So, we need to use a separate primary key.

Therefore, we can introduce an entity, which will hold the attributes of the registration:

In this case, the Registration entity represents the relationship between the other two entities.

Since itâ€™s an entity, itâ€™ll have its own primary key.

In the previous solution, remember that we had a composite primary key we created from the two foreign keys.

Tables:

Student

id
std_name
std_dob

Course

id
crs_name
crs_desc

CourseRegistration

id
std_id
crs_id
regLocation
grade

Implementation in JPA
Since the course_registration became a regular table, we can create a plain old JPA entity modeling it:

@Entity
class CourseRegistration {

    @Id
    Long id;

    @ManyToOne
    @JoinColumn(name = "std_id")
    Student student;

    @ManyToOne
    @JoinColumn(name = "crs_id")
    Course course;

    LocalDateTime regLocation;

    int grade;
    
    // additional properties
    // standard constructors, getters, and setters
}

We also need to configure the relationships in the Student and Course classes:

class Student {

    // ...

    @OneToMany(mappedBy = "student")
    Set<CourseRegistration> registrations;

    // ...
}

class Course {

    // ...

    @OneToMany(mappedBy = "course")
    Set<CourseRegistration> registrations;

    // ...
}


